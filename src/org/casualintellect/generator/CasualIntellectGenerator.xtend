/*
 * generated by Xtext
 */
package org.casualintellect.generator

import java.util.List
import org.casualintellect.casualIntellect.Expression
import org.casualintellect.casualIntellect.State
import org.casualintellect.casualIntellect.Transition
import org.casualintellect.casualIntellect.Transitions
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.IFileSystemAccess
import org.eclipse.xtext.generator.IGenerator

/**
 * Generates code from your model files on save.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#TutorialCodeGeneration
 */
class CasualIntellectGenerator implements IGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess fsa) {
		var states = "";
		for (e : resource.allContents.toIterable.filter(typeof(State))) {
			states = states + e.compile;
			states = states + "\n"
		}
		fsa.generateFile("states/states" + ".xml", states)
	}

	def compile(State state) {
		'''<state name="«state.name»">			
			<before methods="«if (state.before!=null&&state.before.methods!=null) processMethodsList(state.before.methods) else ""»"/>
			<after methods="«processMethodsList(state.after.methods)»"/>	
			<in_process methods="«processMethodsList(state.inProcess.methods)»"/>
			<transitions>«if (state.transitions!=null) compile(state.transitions)»
			 </transitions>
		   </state>
		'''
	}	
	
	def compile(Transitions transitions){
		'''<transitions>
			«FOR transition:transitions.transitions»
				«compile(transition)»
			«ENDFOR»	
		</transitions>'''
	}

	def compile(Transition transition){
		'''<transition name="«transition.name»">
			«complieExpr(transition.condition)»
		</transition>'''	
	}
	
	def complieExpr(Expression condition){
		
	}
	
	def processMethodsList(List<String> methods) {
		var methodsStr = "";
		for (var i = 0; i < methods.length; i++) {
			methodsStr = methodsStr + methods.get(i);
			if (i < methods.length - 1) {
				methodsStr += ',';
			}
		}
		methodsStr;
	}
}
