/*
 * generated by Xtext 2.9.1
 */
package org.casualintellect.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class CasualIntellectGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.casualintellect.CasualIntellect.Model");
		private final Assignment cList_of_statesAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cList_of_statesStateParserRuleCall_0 = (RuleCall)cList_of_statesAssignment.eContents().get(0);
		
		//Model:
		//	list_of_states+=State+;
		@Override public ParserRule getRule() { return rule; }
		
		//list_of_states+=State+
		public Assignment getList_of_statesAssignment() { return cList_of_statesAssignment; }
		
		//State
		public RuleCall getList_of_statesStateParserRuleCall_0() { return cList_of_statesStateParserRuleCall_0; }
	}
	public class StateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.casualintellect.CasualIntellect.State");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cBeforeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cBeforeProcessBeforeStateParserRuleCall_3_0 = (RuleCall)cBeforeAssignment_3.eContents().get(0);
		private final Assignment cAfterAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cAfterProcessAfterStateParserRuleCall_4_0 = (RuleCall)cAfterAssignment_4.eContents().get(0);
		private final Assignment cInProcessAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cInProcessProcessInStateParserRuleCall_5_0 = (RuleCall)cInProcessAssignment_5.eContents().get(0);
		private final Assignment cTransitionsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cTransitionsTransitionsParserRuleCall_6_0 = (RuleCall)cTransitionsAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//State:
		//	'state' name=ID '{' before=ProcessBeforeState? after=ProcessAfterState? inProcess=ProcessInState?
		//	transitions=Transitions? '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'state' name=ID '{' before=ProcessBeforeState? after=ProcessAfterState? inProcess=ProcessInState?
		//transitions=Transitions? '}'
		public Group getGroup() { return cGroup; }
		
		//'state'
		public Keyword getStateKeyword_0() { return cStateKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//before=ProcessBeforeState?
		public Assignment getBeforeAssignment_3() { return cBeforeAssignment_3; }
		
		//ProcessBeforeState
		public RuleCall getBeforeProcessBeforeStateParserRuleCall_3_0() { return cBeforeProcessBeforeStateParserRuleCall_3_0; }
		
		//after=ProcessAfterState?
		public Assignment getAfterAssignment_4() { return cAfterAssignment_4; }
		
		//ProcessAfterState
		public RuleCall getAfterProcessAfterStateParserRuleCall_4_0() { return cAfterProcessAfterStateParserRuleCall_4_0; }
		
		//inProcess=ProcessInState?
		public Assignment getInProcessAssignment_5() { return cInProcessAssignment_5; }
		
		//ProcessInState
		public RuleCall getInProcessProcessInStateParserRuleCall_5_0() { return cInProcessProcessInStateParserRuleCall_5_0; }
		
		//transitions=Transitions?
		public Assignment getTransitionsAssignment_6() { return cTransitionsAssignment_6; }
		
		//Transitions
		public RuleCall getTransitionsTransitionsParserRuleCall_6_0() { return cTransitionsTransitionsParserRuleCall_6_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class TransitionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.casualintellect.CasualIntellect.Transitions");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTransitionsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cListAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cListTransitionParserRuleCall_3_0 = (RuleCall)cListAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cSemicolonKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cTransitionsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cTransitionsTransitionParserRuleCall_4_1_0 = (RuleCall)cTransitionsAssignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Transitions:
		//	'transitions' ':' '{' list+=Transition? (';' transitions+=Transition)* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'transitions' ':' '{' list+=Transition? (';' transitions+=Transition)* '}'
		public Group getGroup() { return cGroup; }
		
		//'transitions'
		public Keyword getTransitionsKeyword_0() { return cTransitionsKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//list+=Transition?
		public Assignment getListAssignment_3() { return cListAssignment_3; }
		
		//Transition
		public RuleCall getListTransitionParserRuleCall_3_0() { return cListTransitionParserRuleCall_3_0; }
		
		//(';' transitions+=Transition)*
		public Group getGroup_4() { return cGroup_4; }
		
		//';'
		public Keyword getSemicolonKeyword_4_0() { return cSemicolonKeyword_4_0; }
		
		//transitions+=Transition
		public Assignment getTransitionsAssignment_4_1() { return cTransitionsAssignment_4_1; }
		
		//Transition
		public RuleCall getTransitionsTransitionParserRuleCall_4_1_0() { return cTransitionsTransitionParserRuleCall_4_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class TransitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.casualintellect.CasualIntellect.Transition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTransitionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cConditionKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cColonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cConditionAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cConditionExpressionParserRuleCall_6_0 = (RuleCall)cConditionAssignment_6.eContents().get(0);
		private final Keyword cSemicolonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cMethodsKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Keyword cColonKeyword_8_1 = (Keyword)cGroup_8.eContents().get(1);
		private final Assignment cMethodsAssignment_8_2 = (Assignment)cGroup_8.eContents().get(2);
		private final RuleCall cMethodsIDTerminalRuleCall_8_2_0 = (RuleCall)cMethodsAssignment_8_2.eContents().get(0);
		private final Group cGroup_8_3 = (Group)cGroup_8.eContents().get(3);
		private final Keyword cCommaKeyword_8_3_0 = (Keyword)cGroup_8_3.eContents().get(0);
		private final Assignment cMethodsAssignment_8_3_1 = (Assignment)cGroup_8_3.eContents().get(1);
		private final RuleCall cMethodsIDTerminalRuleCall_8_3_1_0 = (RuleCall)cMethodsAssignment_8_3_1.eContents().get(0);
		
		////TransitionsList:
		////	transitions+=Transition (';' transitions+=Transition)*;
		//Transition:
		//	'transition' ':' name=ID ';' 'condition' ':' condition=Expression ';' ('methods' ':' methods+=ID (','
		//	methods+=ID)*)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'transition' ':' name=ID ';' 'condition' ':' condition=Expression ';' ('methods' ':' methods+=ID (',' methods+=ID)*)?
		public Group getGroup() { return cGroup; }
		
		//'transition'
		public Keyword getTransitionKeyword_0() { return cTransitionKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
		
		//'condition'
		public Keyword getConditionKeyword_4() { return cConditionKeyword_4; }
		
		//':'
		public Keyword getColonKeyword_5() { return cColonKeyword_5; }
		
		//condition=Expression
		public Assignment getConditionAssignment_6() { return cConditionAssignment_6; }
		
		//Expression
		public RuleCall getConditionExpressionParserRuleCall_6_0() { return cConditionExpressionParserRuleCall_6_0; }
		
		//';'
		public Keyword getSemicolonKeyword_7() { return cSemicolonKeyword_7; }
		
		//('methods' ':' methods+=ID (',' methods+=ID)*)?
		public Group getGroup_8() { return cGroup_8; }
		
		//'methods'
		public Keyword getMethodsKeyword_8_0() { return cMethodsKeyword_8_0; }
		
		//':'
		public Keyword getColonKeyword_8_1() { return cColonKeyword_8_1; }
		
		//methods+=ID
		public Assignment getMethodsAssignment_8_2() { return cMethodsAssignment_8_2; }
		
		//ID
		public RuleCall getMethodsIDTerminalRuleCall_8_2_0() { return cMethodsIDTerminalRuleCall_8_2_0; }
		
		//(',' methods+=ID)*
		public Group getGroup_8_3() { return cGroup_8_3; }
		
		//','
		public Keyword getCommaKeyword_8_3_0() { return cCommaKeyword_8_3_0; }
		
		//methods+=ID
		public Assignment getMethodsAssignment_8_3_1() { return cMethodsAssignment_8_3_1; }
		
		//ID
		public RuleCall getMethodsIDTerminalRuleCall_8_3_1_0() { return cMethodsIDTerminalRuleCall_8_3_1_0; }
	}
	public class ProcessInStateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.casualintellect.CasualIntellect.ProcessInState");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIn_processKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cMethodsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMethodsIDTerminalRuleCall_2_0 = (RuleCall)cMethodsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cMethodsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cMethodsIDTerminalRuleCall_3_1_0 = (RuleCall)cMethodsAssignment_3_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ProcessInState:
		//	'in_process' ':' methods+=ID? (',' methods+=ID)* ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'in_process' ':' methods+=ID? (',' methods+=ID)* ';'
		public Group getGroup() { return cGroup; }
		
		//'in_process'
		public Keyword getIn_processKeyword_0() { return cIn_processKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//methods+=ID?
		public Assignment getMethodsAssignment_2() { return cMethodsAssignment_2; }
		
		//ID
		public RuleCall getMethodsIDTerminalRuleCall_2_0() { return cMethodsIDTerminalRuleCall_2_0; }
		
		//(',' methods+=ID)*
		public Group getGroup_3() { return cGroup_3; }
		
		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//methods+=ID
		public Assignment getMethodsAssignment_3_1() { return cMethodsAssignment_3_1; }
		
		//ID
		public RuleCall getMethodsIDTerminalRuleCall_3_1_0() { return cMethodsIDTerminalRuleCall_3_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class ProcessAfterStateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.casualintellect.CasualIntellect.ProcessAfterState");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAfterKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cMethodsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMethodsIDTerminalRuleCall_2_0 = (RuleCall)cMethodsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cMethodsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cMethodsIDTerminalRuleCall_3_1_0 = (RuleCall)cMethodsAssignment_3_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ProcessAfterState:
		//	'after' ':' methods+=ID? (',' methods+=ID)* ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'after' ':' methods+=ID? (',' methods+=ID)* ';'
		public Group getGroup() { return cGroup; }
		
		//'after'
		public Keyword getAfterKeyword_0() { return cAfterKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//methods+=ID?
		public Assignment getMethodsAssignment_2() { return cMethodsAssignment_2; }
		
		//ID
		public RuleCall getMethodsIDTerminalRuleCall_2_0() { return cMethodsIDTerminalRuleCall_2_0; }
		
		//(',' methods+=ID)*
		public Group getGroup_3() { return cGroup_3; }
		
		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//methods+=ID
		public Assignment getMethodsAssignment_3_1() { return cMethodsAssignment_3_1; }
		
		//ID
		public RuleCall getMethodsIDTerminalRuleCall_3_1_0() { return cMethodsIDTerminalRuleCall_3_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class ProcessBeforeStateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.casualintellect.CasualIntellect.ProcessBeforeState");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBeforeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cMethodsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMethodsIDTerminalRuleCall_2_0 = (RuleCall)cMethodsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cMethodsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cMethodsIDTerminalRuleCall_3_1_0 = (RuleCall)cMethodsAssignment_3_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ProcessBeforeState:
		//	'before' ':' methods+=ID? (',' methods+=ID)* ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'before' ':' methods+=ID? (',' methods+=ID)* ';'
		public Group getGroup() { return cGroup; }
		
		//'before'
		public Keyword getBeforeKeyword_0() { return cBeforeKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//methods+=ID?
		public Assignment getMethodsAssignment_2() { return cMethodsAssignment_2; }
		
		//ID
		public RuleCall getMethodsIDTerminalRuleCall_2_0() { return cMethodsIDTerminalRuleCall_2_0; }
		
		//(',' methods+=ID)*
		public Group getGroup_3() { return cGroup_3; }
		
		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//methods+=ID
		public Assignment getMethodsAssignment_3_1() { return cMethodsAssignment_3_1; }
		
		//ID
		public RuleCall getMethodsIDTerminalRuleCall_3_1_0() { return cMethodsIDTerminalRuleCall_3_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.casualintellect.CasualIntellect.Expression");
		private final RuleCall cOrParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Expression:
		//	Or;
		@Override public ParserRule getRule() { return rule; }
		
		//Or
		public RuleCall getOrParserRuleCall() { return cOrParserRuleCall; }
	}
	public class OrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.casualintellect.CasualIntellect.Or");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAndParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOrLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cVerticalLineVerticalLineKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightAndParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Or Expression:
		//	And ({Or.left=current} "||" right=And)*
		@Override public ParserRule getRule() { return rule; }
		
		//And ({Or.left=current} "||" right=And)*
		public Group getGroup() { return cGroup; }
		
		//And
		public RuleCall getAndParserRuleCall_0() { return cAndParserRuleCall_0; }
		
		//({Or.left=current} "||" right=And)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Or.left=current}
		public Action getOrLeftAction_1_0() { return cOrLeftAction_1_0; }
		
		//"||"
		public Keyword getVerticalLineVerticalLineKeyword_1_1() { return cVerticalLineVerticalLineKeyword_1_1; }
		
		//right=And
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//And
		public RuleCall getRightAndParserRuleCall_1_2_0() { return cRightAndParserRuleCall_1_2_0; }
	}
	public class AndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.casualintellect.CasualIntellect.And");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimaryParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAndLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cAmpersandAmpersandKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightPrimaryParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//And Expression:
		//	Primary ({And.left=current} "&&" right=Primary)*
		@Override public ParserRule getRule() { return rule; }
		
		//Primary ({And.left=current} "&&" right=Primary)*
		public Group getGroup() { return cGroup; }
		
		//Primary
		public RuleCall getPrimaryParserRuleCall_0() { return cPrimaryParserRuleCall_0; }
		
		//({And.left=current} "&&" right=Primary)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{And.left=current}
		public Action getAndLeftAction_1_0() { return cAndLeftAction_1_0; }
		
		//"&&"
		public Keyword getAmpersandAmpersandKeyword_1_1() { return cAmpersandAmpersandKeyword_1_1; }
		
		//right=Primary
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Primary
		public RuleCall getRightPrimaryParserRuleCall_1_2_0() { return cRightPrimaryParserRuleCall_1_2_0; }
	}
	public class PrimaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.casualintellect.CasualIntellect.Primary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cNotAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cExclamationMarkKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cExpressionAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cExpressionPrimaryParserRuleCall_1_2_0 = (RuleCall)cExpressionAssignment_1_2.eContents().get(0);
		private final RuleCall cAtomicParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Primary Expression:
		//	'(' Expression ')' | {Not} "!" expression=Primary | Atomic
		@Override public ParserRule getRule() { return rule; }
		
		//'(' Expression ')' | {Not} "!" expression=Primary | Atomic
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'(' Expression ')'
		public Group getGroup_0() { return cGroup_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_0() { return cLeftParenthesisKeyword_0_0; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_0_1() { return cExpressionParserRuleCall_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_2() { return cRightParenthesisKeyword_0_2; }
		
		//{Not} "!" expression=Primary
		public Group getGroup_1() { return cGroup_1; }
		
		//{Not}
		public Action getNotAction_1_0() { return cNotAction_1_0; }
		
		//"!"
		public Keyword getExclamationMarkKeyword_1_1() { return cExclamationMarkKeyword_1_1; }
		
		//expression=Primary
		public Assignment getExpressionAssignment_1_2() { return cExpressionAssignment_1_2; }
		
		//Primary
		public RuleCall getExpressionPrimaryParserRuleCall_1_2_0() { return cExpressionPrimaryParserRuleCall_1_2_0; }
		
		//Atomic
		public RuleCall getAtomicParserRuleCall_2() { return cAtomicParserRuleCall_2; }
	}
	public class AtomicElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.casualintellect.CasualIntellect.Atomic");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cStringConstantAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cValueAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cValueIDTerminalRuleCall_0_1_0 = (RuleCall)cValueAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cBoolConstantAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cValueAlternatives_1_1_0 = (Alternatives)cValueAssignment_1_1.eContents().get(0);
		private final Keyword cValueTrueKeyword_1_1_0_0 = (Keyword)cValueAlternatives_1_1_0.eContents().get(0);
		private final Keyword cValueFalseKeyword_1_1_0_1 = (Keyword)cValueAlternatives_1_1_0.eContents().get(1);
		
		//Atomic Expression:
		//	{StringConstant} value=ID | {BoolConstant} value=('true' | 'false')
		@Override public ParserRule getRule() { return rule; }
		
		//{StringConstant} value=ID | {BoolConstant} value=('true' | 'false')
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{StringConstant} value=ID
		public Group getGroup_0() { return cGroup_0; }
		
		//{StringConstant}
		public Action getStringConstantAction_0_0() { return cStringConstantAction_0_0; }
		
		//value=ID
		public Assignment getValueAssignment_0_1() { return cValueAssignment_0_1; }
		
		//ID
		public RuleCall getValueIDTerminalRuleCall_0_1_0() { return cValueIDTerminalRuleCall_0_1_0; }
		
		//{BoolConstant} value=('true' | 'false')
		public Group getGroup_1() { return cGroup_1; }
		
		//{BoolConstant}
		public Action getBoolConstantAction_1_0() { return cBoolConstantAction_1_0; }
		
		//value=('true' | 'false')
		public Assignment getValueAssignment_1_1() { return cValueAssignment_1_1; }
		
		//('true' | 'false')
		public Alternatives getValueAlternatives_1_1_0() { return cValueAlternatives_1_1_0; }
		
		//'true'
		public Keyword getValueTrueKeyword_1_1_0_0() { return cValueTrueKeyword_1_1_0_0; }
		
		//'false'
		public Keyword getValueFalseKeyword_1_1_0_1() { return cValueFalseKeyword_1_1_0_1; }
	}
	
	
	private final ModelElements pModel;
	private final StateElements pState;
	private final TransitionsElements pTransitions;
	private final TransitionElements pTransition;
	private final ProcessInStateElements pProcessInState;
	private final ProcessAfterStateElements pProcessAfterState;
	private final ProcessBeforeStateElements pProcessBeforeState;
	private final ExpressionElements pExpression;
	private final OrElements pOr;
	private final AndElements pAnd;
	private final PrimaryElements pPrimary;
	private final AtomicElements pAtomic;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public CasualIntellectGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pState = new StateElements();
		this.pTransitions = new TransitionsElements();
		this.pTransition = new TransitionElements();
		this.pProcessInState = new ProcessInStateElements();
		this.pProcessAfterState = new ProcessAfterStateElements();
		this.pProcessBeforeState = new ProcessBeforeStateElements();
		this.pExpression = new ExpressionElements();
		this.pOr = new OrElements();
		this.pAnd = new AndElements();
		this.pPrimary = new PrimaryElements();
		this.pAtomic = new AtomicElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.casualintellect.CasualIntellect".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	list_of_states+=State+;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//State:
	//	'state' name=ID '{' before=ProcessBeforeState? after=ProcessAfterState? inProcess=ProcessInState?
	//	transitions=Transitions? '}';
	public StateElements getStateAccess() {
		return pState;
	}
	
	public ParserRule getStateRule() {
		return getStateAccess().getRule();
	}
	
	//Transitions:
	//	'transitions' ':' '{' list+=Transition? (';' transitions+=Transition)* '}';
	public TransitionsElements getTransitionsAccess() {
		return pTransitions;
	}
	
	public ParserRule getTransitionsRule() {
		return getTransitionsAccess().getRule();
	}
	
	////TransitionsList:
	////	transitions+=Transition (';' transitions+=Transition)*;
	//Transition:
	//	'transition' ':' name=ID ';' 'condition' ':' condition=Expression ';' ('methods' ':' methods+=ID (','
	//	methods+=ID)*)?;
	public TransitionElements getTransitionAccess() {
		return pTransition;
	}
	
	public ParserRule getTransitionRule() {
		return getTransitionAccess().getRule();
	}
	
	//ProcessInState:
	//	'in_process' ':' methods+=ID? (',' methods+=ID)* ';';
	public ProcessInStateElements getProcessInStateAccess() {
		return pProcessInState;
	}
	
	public ParserRule getProcessInStateRule() {
		return getProcessInStateAccess().getRule();
	}
	
	//ProcessAfterState:
	//	'after' ':' methods+=ID? (',' methods+=ID)* ';';
	public ProcessAfterStateElements getProcessAfterStateAccess() {
		return pProcessAfterState;
	}
	
	public ParserRule getProcessAfterStateRule() {
		return getProcessAfterStateAccess().getRule();
	}
	
	//ProcessBeforeState:
	//	'before' ':' methods+=ID? (',' methods+=ID)* ';';
	public ProcessBeforeStateElements getProcessBeforeStateAccess() {
		return pProcessBeforeState;
	}
	
	public ParserRule getProcessBeforeStateRule() {
		return getProcessBeforeStateAccess().getRule();
	}
	
	//Expression:
	//	Or;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//Or Expression:
	//	And ({Or.left=current} "||" right=And)*
	public OrElements getOrAccess() {
		return pOr;
	}
	
	public ParserRule getOrRule() {
		return getOrAccess().getRule();
	}
	
	//And Expression:
	//	Primary ({And.left=current} "&&" right=Primary)*
	public AndElements getAndAccess() {
		return pAnd;
	}
	
	public ParserRule getAndRule() {
		return getAndAccess().getRule();
	}
	
	//Primary Expression:
	//	'(' Expression ')' | {Not} "!" expression=Primary | Atomic
	public PrimaryElements getPrimaryAccess() {
		return pPrimary;
	}
	
	public ParserRule getPrimaryRule() {
		return getPrimaryAccess().getRule();
	}
	
	//Atomic Expression:
	//	{StringConstant} value=ID | {BoolConstant} value=('true' | 'false')
	public AtomicElements getAtomicAccess() {
		return pAtomic;
	}
	
	public ParserRule getAtomicRule() {
		return getAtomicAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
