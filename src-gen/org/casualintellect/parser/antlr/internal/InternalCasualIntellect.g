/*
 * generated by Xtext 2.9.1
 */
grammar InternalCasualIntellect;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.casualintellect.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.casualintellect.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.casualintellect.services.CasualIntellectGrammarAccess;

}

@parser::members {

 	private CasualIntellectGrammarAccess grammarAccess;

    public InternalCasualIntellectParser(TokenStream input, CasualIntellectGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected CasualIntellectGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getModelAccess().getList_of_statesStateParserRuleCall_0());
			}
			lv_list_of_states_0_0=ruleState
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getModelRule());
				}
				add(
					$current,
					"list_of_states",
					lv_list_of_states_0_0,
					"org.casualintellect.CasualIntellect.State");
				afterParserOrEnumRuleCall();
			}
		)
	)+
;

// Entry rule entryRuleState
entryRuleState returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStateRule()); }
	iv_ruleState=ruleState
	{ $current=$iv_ruleState.current; }
	EOF;

// Rule State
ruleState returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='state'
		{
			newLeafNode(otherlv_0, grammarAccess.getStateAccess().getStateKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getStateAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getStateRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getStateAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getStateAccess().getBeforeProcessBeforeStateParserRuleCall_3_0());
				}
				lv_before_3_0=ruleProcessBeforeState
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStateRule());
					}
					set(
						$current,
						"before",
						lv_before_3_0,
						"org.casualintellect.CasualIntellect.ProcessBeforeState");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getStateAccess().getAfterProcessAfterStateParserRuleCall_4_0());
				}
				lv_after_4_0=ruleProcessAfterState
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStateRule());
					}
					set(
						$current,
						"after",
						lv_after_4_0,
						"org.casualintellect.CasualIntellect.ProcessAfterState");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getStateAccess().getInProcessProcessInStateParserRuleCall_5_0());
				}
				lv_inProcess_5_0=ruleProcessInState
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStateRule());
					}
					set(
						$current,
						"inProcess",
						lv_inProcess_5_0,
						"org.casualintellect.CasualIntellect.ProcessInState");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getStateAccess().getTransitionsTransitionsParserRuleCall_6_0());
				}
				lv_transitions_6_0=ruleTransitions
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStateRule());
					}
					set(
						$current,
						"transitions",
						lv_transitions_6_0,
						"org.casualintellect.CasualIntellect.Transitions");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_7='}'
		{
			newLeafNode(otherlv_7, grammarAccess.getStateAccess().getRightCurlyBracketKeyword_7());
		}
	)
;

// Entry rule entryRuleTransitions
entryRuleTransitions returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTransitionsRule()); }
	iv_ruleTransitions=ruleTransitions
	{ $current=$iv_ruleTransitions.current; }
	EOF;

// Rule Transitions
ruleTransitions returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='transitions'
		{
			newLeafNode(otherlv_0, grammarAccess.getTransitionsAccess().getTransitionsKeyword_0());
		}
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getTransitionsAccess().getColonKeyword_1());
		}
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getTransitionsAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTransitionsAccess().getListTransitionParserRuleCall_3_0());
				}
				lv_list_3_0=ruleTransition
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTransitionsRule());
					}
					add(
						$current,
						"list",
						lv_list_3_0,
						"org.casualintellect.CasualIntellect.Transition");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			otherlv_4=';'
			{
				newLeafNode(otherlv_4, grammarAccess.getTransitionsAccess().getSemicolonKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getTransitionsAccess().getTransitionsTransitionParserRuleCall_4_1_0());
					}
					lv_transitions_5_0=ruleTransition
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTransitionsRule());
						}
						add(
							$current,
							"transitions",
							lv_transitions_5_0,
							"org.casualintellect.CasualIntellect.Transition");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_6='}'
		{
			newLeafNode(otherlv_6, grammarAccess.getTransitionsAccess().getRightCurlyBracketKeyword_5());
		}
	)
;

// Entry rule entryRuleTransition
entryRuleTransition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTransitionRule()); }
	iv_ruleTransition=ruleTransition
	{ $current=$iv_ruleTransition.current; }
	EOF;

// Rule Transition
ruleTransition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='transition'
		{
			newLeafNode(otherlv_0, grammarAccess.getTransitionAccess().getTransitionKeyword_0());
		}
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getTransitionAccess().getColonKeyword_1());
		}
		(
			(
				lv_name_2_0=RULE_ID
				{
					newLeafNode(lv_name_2_0, grammarAccess.getTransitionAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTransitionRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_3=';'
		{
			newLeafNode(otherlv_3, grammarAccess.getTransitionAccess().getSemicolonKeyword_3());
		}
		otherlv_4='condition'
		{
			newLeafNode(otherlv_4, grammarAccess.getTransitionAccess().getConditionKeyword_4());
		}
		otherlv_5=':'
		{
			newLeafNode(otherlv_5, grammarAccess.getTransitionAccess().getColonKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTransitionAccess().getConditionExpressionParserRuleCall_6_0());
				}
				lv_condition_6_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTransitionRule());
					}
					set(
						$current,
						"condition",
						lv_condition_6_0,
						"org.casualintellect.CasualIntellect.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_7=';'
		{
			newLeafNode(otherlv_7, grammarAccess.getTransitionAccess().getSemicolonKeyword_7());
		}
		(
			otherlv_8='methods'
			{
				newLeafNode(otherlv_8, grammarAccess.getTransitionAccess().getMethodsKeyword_8_0());
			}
			otherlv_9=':'
			{
				newLeafNode(otherlv_9, grammarAccess.getTransitionAccess().getColonKeyword_8_1());
			}
			(
				(
					lv_methods_10_0=RULE_ID
					{
						newLeafNode(lv_methods_10_0, grammarAccess.getTransitionAccess().getMethodsIDTerminalRuleCall_8_2_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getTransitionRule());
						}
						addWithLastConsumed(
							$current,
							"methods",
							lv_methods_10_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
			(
				otherlv_11=','
				{
					newLeafNode(otherlv_11, grammarAccess.getTransitionAccess().getCommaKeyword_8_3_0());
				}
				(
					(
						lv_methods_12_0=RULE_ID
						{
							newLeafNode(lv_methods_12_0, grammarAccess.getTransitionAccess().getMethodsIDTerminalRuleCall_8_3_1_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getTransitionRule());
							}
							addWithLastConsumed(
								$current,
								"methods",
								lv_methods_12_0,
								"org.eclipse.xtext.common.Terminals.ID");
						}
					)
				)
			)*
		)?
	)
;

// Entry rule entryRuleProcessInState
entryRuleProcessInState returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getProcessInStateRule()); }
	iv_ruleProcessInState=ruleProcessInState
	{ $current=$iv_ruleProcessInState.current; }
	EOF;

// Rule ProcessInState
ruleProcessInState returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='in_process'
		{
			newLeafNode(otherlv_0, grammarAccess.getProcessInStateAccess().getIn_processKeyword_0());
		}
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getProcessInStateAccess().getColonKeyword_1());
		}
		(
			(
				lv_methods_2_0=RULE_ID
				{
					newLeafNode(lv_methods_2_0, grammarAccess.getProcessInStateAccess().getMethodsIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getProcessInStateRule());
					}
					addWithLastConsumed(
						$current,
						"methods",
						lv_methods_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)?
		(
			otherlv_3=','
			{
				newLeafNode(otherlv_3, grammarAccess.getProcessInStateAccess().getCommaKeyword_3_0());
			}
			(
				(
					lv_methods_4_0=RULE_ID
					{
						newLeafNode(lv_methods_4_0, grammarAccess.getProcessInStateAccess().getMethodsIDTerminalRuleCall_3_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getProcessInStateRule());
						}
						addWithLastConsumed(
							$current,
							"methods",
							lv_methods_4_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
		)*
		otherlv_5=';'
		{
			newLeafNode(otherlv_5, grammarAccess.getProcessInStateAccess().getSemicolonKeyword_4());
		}
	)
;

// Entry rule entryRuleProcessAfterState
entryRuleProcessAfterState returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getProcessAfterStateRule()); }
	iv_ruleProcessAfterState=ruleProcessAfterState
	{ $current=$iv_ruleProcessAfterState.current; }
	EOF;

// Rule ProcessAfterState
ruleProcessAfterState returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='after'
		{
			newLeafNode(otherlv_0, grammarAccess.getProcessAfterStateAccess().getAfterKeyword_0());
		}
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getProcessAfterStateAccess().getColonKeyword_1());
		}
		(
			(
				lv_methods_2_0=RULE_ID
				{
					newLeafNode(lv_methods_2_0, grammarAccess.getProcessAfterStateAccess().getMethodsIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getProcessAfterStateRule());
					}
					addWithLastConsumed(
						$current,
						"methods",
						lv_methods_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)?
		(
			otherlv_3=','
			{
				newLeafNode(otherlv_3, grammarAccess.getProcessAfterStateAccess().getCommaKeyword_3_0());
			}
			(
				(
					lv_methods_4_0=RULE_ID
					{
						newLeafNode(lv_methods_4_0, grammarAccess.getProcessAfterStateAccess().getMethodsIDTerminalRuleCall_3_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getProcessAfterStateRule());
						}
						addWithLastConsumed(
							$current,
							"methods",
							lv_methods_4_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
		)*
		otherlv_5=';'
		{
			newLeafNode(otherlv_5, grammarAccess.getProcessAfterStateAccess().getSemicolonKeyword_4());
		}
	)
;

// Entry rule entryRuleProcessBeforeState
entryRuleProcessBeforeState returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getProcessBeforeStateRule()); }
	iv_ruleProcessBeforeState=ruleProcessBeforeState
	{ $current=$iv_ruleProcessBeforeState.current; }
	EOF;

// Rule ProcessBeforeState
ruleProcessBeforeState returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='before'
		{
			newLeafNode(otherlv_0, grammarAccess.getProcessBeforeStateAccess().getBeforeKeyword_0());
		}
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getProcessBeforeStateAccess().getColonKeyword_1());
		}
		(
			(
				lv_methods_2_0=RULE_ID
				{
					newLeafNode(lv_methods_2_0, grammarAccess.getProcessBeforeStateAccess().getMethodsIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getProcessBeforeStateRule());
					}
					addWithLastConsumed(
						$current,
						"methods",
						lv_methods_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)?
		(
			otherlv_3=','
			{
				newLeafNode(otherlv_3, grammarAccess.getProcessBeforeStateAccess().getCommaKeyword_3_0());
			}
			(
				(
					lv_methods_4_0=RULE_ID
					{
						newLeafNode(lv_methods_4_0, grammarAccess.getProcessBeforeStateAccess().getMethodsIDTerminalRuleCall_3_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getProcessBeforeStateRule());
						}
						addWithLastConsumed(
							$current,
							"methods",
							lv_methods_4_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
		)*
		otherlv_5=';'
		{
			newLeafNode(otherlv_5, grammarAccess.getProcessBeforeStateAccess().getSemicolonKeyword_4());
		}
	)
;

// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	iv_ruleExpression=ruleExpression
	{ $current=$iv_ruleExpression.current; }
	EOF;

// Rule Expression
ruleExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getExpressionAccess().getOrParserRuleCall());
	}
	this_Or_0=ruleOr
	{
		$current = $this_Or_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleOr
entryRuleOr returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOrRule()); }
	iv_ruleOr=ruleOr
	{ $current=$iv_ruleOr.current; }
	EOF;

// Rule Or
ruleOr returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getOrAccess().getAndParserRuleCall_0());
		}
		this_And_0=ruleAnd
		{
			$current = $this_And_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getOrAccess().getOrLeftAction_1_0(),
						$current);
				}
			)
			otherlv_2='||'
			{
				newLeafNode(otherlv_2, grammarAccess.getOrAccess().getVerticalLineVerticalLineKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getOrAccess().getRightAndParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleAnd
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getOrRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.casualintellect.CasualIntellect.And");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleAnd
entryRuleAnd returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAndRule()); }
	iv_ruleAnd=ruleAnd
	{ $current=$iv_ruleAnd.current; }
	EOF;

// Rule And
ruleAnd returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAndAccess().getPrimaryParserRuleCall_0());
		}
		this_Primary_0=rulePrimary
		{
			$current = $this_Primary_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getAndAccess().getAndLeftAction_1_0(),
						$current);
				}
			)
			otherlv_2='&&'
			{
				newLeafNode(otherlv_2, grammarAccess.getAndAccess().getAmpersandAmpersandKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getAndAccess().getRightPrimaryParserRuleCall_1_2_0());
					}
					lv_right_3_0=rulePrimary
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAndRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.casualintellect.CasualIntellect.Primary");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRulePrimary
entryRulePrimary returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPrimaryRule()); }
	iv_rulePrimary=rulePrimary
	{ $current=$iv_rulePrimary.current; }
	EOF;

// Rule Primary
rulePrimary returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='('
			{
				newLeafNode(otherlv_0, grammarAccess.getPrimaryAccess().getLeftParenthesisKeyword_0_0());
			}
			{
				newCompositeNode(grammarAccess.getPrimaryAccess().getExpressionParserRuleCall_0_1());
			}
			this_Expression_1=ruleExpression
			{
				$current = $this_Expression_1.current;
				afterParserOrEnumRuleCall();
			}
			otherlv_2=')'
			{
				newLeafNode(otherlv_2, grammarAccess.getPrimaryAccess().getRightParenthesisKeyword_0_2());
			}
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getPrimaryAccess().getNotAction_1_0(),
						$current);
				}
			)
			otherlv_4='!'
			{
				newLeafNode(otherlv_4, grammarAccess.getPrimaryAccess().getExclamationMarkKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getPrimaryAccess().getExpressionPrimaryParserRuleCall_1_2_0());
					}
					lv_expression_5_0=rulePrimary
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPrimaryRule());
						}
						set(
							$current,
							"expression",
							lv_expression_5_0,
							"org.casualintellect.CasualIntellect.Primary");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		{
			newCompositeNode(grammarAccess.getPrimaryAccess().getAtomicParserRuleCall_2());
		}
		this_Atomic_6=ruleAtomic
		{
			$current = $this_Atomic_6.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleAtomic
entryRuleAtomic returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAtomicRule()); }
	iv_ruleAtomic=ruleAtomic
	{ $current=$iv_ruleAtomic.current; }
	EOF;

// Rule Atomic
ruleAtomic returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getAtomicAccess().getStringConstantAction_0_0(),
						$current);
				}
			)
			(
				(
					lv_value_1_0=RULE_ID
					{
						newLeafNode(lv_value_1_0, grammarAccess.getAtomicAccess().getValueIDTerminalRuleCall_0_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getAtomicRule());
						}
						setWithLastConsumed(
							$current,
							"value",
							lv_value_1_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getAtomicAccess().getBoolConstantAction_1_0(),
						$current);
				}
			)
			(
				(
					(
						lv_value_3_1='true'
						{
							newLeafNode(lv_value_3_1, grammarAccess.getAtomicAccess().getValueTrueKeyword_1_1_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getAtomicRule());
							}
							setWithLastConsumed($current, "value", lv_value_3_1, null);
						}
						    |
						lv_value_3_2='false'
						{
							newLeafNode(lv_value_3_2, grammarAccess.getAtomicAccess().getValueFalseKeyword_1_1_0_1());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getAtomicRule());
							}
							setWithLastConsumed($current, "value", lv_value_3_2, null);
						}
					)
				)
			)
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
