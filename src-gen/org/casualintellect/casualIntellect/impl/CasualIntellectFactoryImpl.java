/**
 * generated by Xtext 2.9.1
 */
package org.casualintellect.casualIntellect.impl;

import org.casualintellect.casualIntellect.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class CasualIntellectFactoryImpl extends EFactoryImpl implements CasualIntellectFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static CasualIntellectFactory init()
  {
    try
    {
      CasualIntellectFactory theCasualIntellectFactory = (CasualIntellectFactory)EPackage.Registry.INSTANCE.getEFactory(CasualIntellectPackage.eNS_URI);
      if (theCasualIntellectFactory != null)
      {
        return theCasualIntellectFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new CasualIntellectFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public CasualIntellectFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case CasualIntellectPackage.MODEL: return createModel();
      case CasualIntellectPackage.STATE: return createState();
      case CasualIntellectPackage.TRANSITIONS: return createTransitions();
      case CasualIntellectPackage.TRANSITION: return createTransition();
      case CasualIntellectPackage.PROCESS_IN_STATE: return createProcessInState();
      case CasualIntellectPackage.PROCESS_AFTER_STATE: return createProcessAfterState();
      case CasualIntellectPackage.PROCESS_BEFORE_STATE: return createProcessBeforeState();
      case CasualIntellectPackage.EXPRESSION: return createExpression();
      case CasualIntellectPackage.OR: return createOr();
      case CasualIntellectPackage.AND: return createAnd();
      case CasualIntellectPackage.NOT: return createNot();
      case CasualIntellectPackage.STRING_CONSTANT: return createStringConstant();
      case CasualIntellectPackage.BOOL_CONSTANT: return createBoolConstant();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Model createModel()
  {
    ModelImpl model = new ModelImpl();
    return model;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public State createState()
  {
    StateImpl state = new StateImpl();
    return state;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Transitions createTransitions()
  {
    TransitionsImpl transitions = new TransitionsImpl();
    return transitions;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Transition createTransition()
  {
    TransitionImpl transition = new TransitionImpl();
    return transition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ProcessInState createProcessInState()
  {
    ProcessInStateImpl processInState = new ProcessInStateImpl();
    return processInState;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ProcessAfterState createProcessAfterState()
  {
    ProcessAfterStateImpl processAfterState = new ProcessAfterStateImpl();
    return processAfterState;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ProcessBeforeState createProcessBeforeState()
  {
    ProcessBeforeStateImpl processBeforeState = new ProcessBeforeStateImpl();
    return processBeforeState;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Expression createExpression()
  {
    ExpressionImpl expression = new ExpressionImpl();
    return expression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Or createOr()
  {
    OrImpl or = new OrImpl();
    return or;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public And createAnd()
  {
    AndImpl and = new AndImpl();
    return and;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Not createNot()
  {
    NotImpl not = new NotImpl();
    return not;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public StringConstant createStringConstant()
  {
    StringConstantImpl stringConstant = new StringConstantImpl();
    return stringConstant;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BoolConstant createBoolConstant()
  {
    BoolConstantImpl boolConstant = new BoolConstantImpl();
    return boolConstant;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public CasualIntellectPackage getCasualIntellectPackage()
  {
    return (CasualIntellectPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static CasualIntellectPackage getPackage()
  {
    return CasualIntellectPackage.eINSTANCE;
  }

} //CasualIntellectFactoryImpl
