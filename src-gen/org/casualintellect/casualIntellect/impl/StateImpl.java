/**
 * generated by Xtext 2.9.1
 */
package org.casualintellect.casualIntellect.impl;

import org.casualintellect.casualIntellect.CasualIntellectPackage;
import org.casualintellect.casualIntellect.ProcessAfterState;
import org.casualintellect.casualIntellect.ProcessBeforeState;
import org.casualintellect.casualIntellect.ProcessInState;
import org.casualintellect.casualIntellect.State;
import org.casualintellect.casualIntellect.Transitions;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>State</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * <ul>
 *   <li>{@link org.casualintellect.casualIntellect.impl.StateImpl#getName <em>Name</em>}</li>
 *   <li>{@link org.casualintellect.casualIntellect.impl.StateImpl#getBefore <em>Before</em>}</li>
 *   <li>{@link org.casualintellect.casualIntellect.impl.StateImpl#getAfter <em>After</em>}</li>
 *   <li>{@link org.casualintellect.casualIntellect.impl.StateImpl#getInProcess <em>In Process</em>}</li>
 *   <li>{@link org.casualintellect.casualIntellect.impl.StateImpl#getTransitions <em>Transitions</em>}</li>
 * </ul>
 * </p>
 *
 * @generated
 */
public class StateImpl extends MinimalEObjectImpl.Container implements State
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getBefore() <em>Before</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBefore()
   * @generated
   * @ordered
   */
  protected ProcessBeforeState before;

  /**
   * The cached value of the '{@link #getAfter() <em>After</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAfter()
   * @generated
   * @ordered
   */
  protected ProcessAfterState after;

  /**
   * The cached value of the '{@link #getInProcess() <em>In Process</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getInProcess()
   * @generated
   * @ordered
   */
  protected ProcessInState inProcess;

  /**
   * The cached value of the '{@link #getTransitions() <em>Transitions</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTransitions()
   * @generated
   * @ordered
   */
  protected Transitions transitions;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected StateImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return CasualIntellectPackage.Literals.STATE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CasualIntellectPackage.STATE__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ProcessBeforeState getBefore()
  {
    return before;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetBefore(ProcessBeforeState newBefore, NotificationChain msgs)
  {
    ProcessBeforeState oldBefore = before;
    before = newBefore;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, CasualIntellectPackage.STATE__BEFORE, oldBefore, newBefore);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setBefore(ProcessBeforeState newBefore)
  {
    if (newBefore != before)
    {
      NotificationChain msgs = null;
      if (before != null)
        msgs = ((InternalEObject)before).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - CasualIntellectPackage.STATE__BEFORE, null, msgs);
      if (newBefore != null)
        msgs = ((InternalEObject)newBefore).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - CasualIntellectPackage.STATE__BEFORE, null, msgs);
      msgs = basicSetBefore(newBefore, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CasualIntellectPackage.STATE__BEFORE, newBefore, newBefore));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ProcessAfterState getAfter()
  {
    return after;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetAfter(ProcessAfterState newAfter, NotificationChain msgs)
  {
    ProcessAfterState oldAfter = after;
    after = newAfter;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, CasualIntellectPackage.STATE__AFTER, oldAfter, newAfter);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setAfter(ProcessAfterState newAfter)
  {
    if (newAfter != after)
    {
      NotificationChain msgs = null;
      if (after != null)
        msgs = ((InternalEObject)after).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - CasualIntellectPackage.STATE__AFTER, null, msgs);
      if (newAfter != null)
        msgs = ((InternalEObject)newAfter).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - CasualIntellectPackage.STATE__AFTER, null, msgs);
      msgs = basicSetAfter(newAfter, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CasualIntellectPackage.STATE__AFTER, newAfter, newAfter));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ProcessInState getInProcess()
  {
    return inProcess;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetInProcess(ProcessInState newInProcess, NotificationChain msgs)
  {
    ProcessInState oldInProcess = inProcess;
    inProcess = newInProcess;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, CasualIntellectPackage.STATE__IN_PROCESS, oldInProcess, newInProcess);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setInProcess(ProcessInState newInProcess)
  {
    if (newInProcess != inProcess)
    {
      NotificationChain msgs = null;
      if (inProcess != null)
        msgs = ((InternalEObject)inProcess).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - CasualIntellectPackage.STATE__IN_PROCESS, null, msgs);
      if (newInProcess != null)
        msgs = ((InternalEObject)newInProcess).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - CasualIntellectPackage.STATE__IN_PROCESS, null, msgs);
      msgs = basicSetInProcess(newInProcess, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CasualIntellectPackage.STATE__IN_PROCESS, newInProcess, newInProcess));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Transitions getTransitions()
  {
    return transitions;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetTransitions(Transitions newTransitions, NotificationChain msgs)
  {
    Transitions oldTransitions = transitions;
    transitions = newTransitions;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, CasualIntellectPackage.STATE__TRANSITIONS, oldTransitions, newTransitions);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setTransitions(Transitions newTransitions)
  {
    if (newTransitions != transitions)
    {
      NotificationChain msgs = null;
      if (transitions != null)
        msgs = ((InternalEObject)transitions).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - CasualIntellectPackage.STATE__TRANSITIONS, null, msgs);
      if (newTransitions != null)
        msgs = ((InternalEObject)newTransitions).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - CasualIntellectPackage.STATE__TRANSITIONS, null, msgs);
      msgs = basicSetTransitions(newTransitions, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CasualIntellectPackage.STATE__TRANSITIONS, newTransitions, newTransitions));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case CasualIntellectPackage.STATE__BEFORE:
        return basicSetBefore(null, msgs);
      case CasualIntellectPackage.STATE__AFTER:
        return basicSetAfter(null, msgs);
      case CasualIntellectPackage.STATE__IN_PROCESS:
        return basicSetInProcess(null, msgs);
      case CasualIntellectPackage.STATE__TRANSITIONS:
        return basicSetTransitions(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case CasualIntellectPackage.STATE__NAME:
        return getName();
      case CasualIntellectPackage.STATE__BEFORE:
        return getBefore();
      case CasualIntellectPackage.STATE__AFTER:
        return getAfter();
      case CasualIntellectPackage.STATE__IN_PROCESS:
        return getInProcess();
      case CasualIntellectPackage.STATE__TRANSITIONS:
        return getTransitions();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case CasualIntellectPackage.STATE__NAME:
        setName((String)newValue);
        return;
      case CasualIntellectPackage.STATE__BEFORE:
        setBefore((ProcessBeforeState)newValue);
        return;
      case CasualIntellectPackage.STATE__AFTER:
        setAfter((ProcessAfterState)newValue);
        return;
      case CasualIntellectPackage.STATE__IN_PROCESS:
        setInProcess((ProcessInState)newValue);
        return;
      case CasualIntellectPackage.STATE__TRANSITIONS:
        setTransitions((Transitions)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case CasualIntellectPackage.STATE__NAME:
        setName(NAME_EDEFAULT);
        return;
      case CasualIntellectPackage.STATE__BEFORE:
        setBefore((ProcessBeforeState)null);
        return;
      case CasualIntellectPackage.STATE__AFTER:
        setAfter((ProcessAfterState)null);
        return;
      case CasualIntellectPackage.STATE__IN_PROCESS:
        setInProcess((ProcessInState)null);
        return;
      case CasualIntellectPackage.STATE__TRANSITIONS:
        setTransitions((Transitions)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case CasualIntellectPackage.STATE__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case CasualIntellectPackage.STATE__BEFORE:
        return before != null;
      case CasualIntellectPackage.STATE__AFTER:
        return after != null;
      case CasualIntellectPackage.STATE__IN_PROCESS:
        return inProcess != null;
      case CasualIntellectPackage.STATE__TRANSITIONS:
        return transitions != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(')');
    return result.toString();
  }

} //StateImpl
