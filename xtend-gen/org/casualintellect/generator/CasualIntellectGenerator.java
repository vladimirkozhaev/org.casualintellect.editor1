/**
 * generated by Xtext
 */
package org.casualintellect.generator;

import com.google.common.base.Objects;
import com.google.common.collect.Iterables;
import java.util.List;
import org.casualintellect.casualIntellect.Expression;
import org.casualintellect.casualIntellect.ProcessAfterState;
import org.casualintellect.casualIntellect.ProcessBeforeState;
import org.casualintellect.casualIntellect.ProcessInState;
import org.casualintellect.casualIntellect.State;
import org.casualintellect.casualIntellect.Transition;
import org.casualintellect.casualIntellect.Transitions;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.common.util.TreeIterator;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.IFileSystemAccess;
import org.eclipse.xtext.generator.IGenerator;
import org.eclipse.xtext.xbase.lib.Conversions;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;

/**
 * Generates code from your model files on save.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#TutorialCodeGeneration
 */
@SuppressWarnings("all")
public class CasualIntellectGenerator implements IGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess fsa) {
    String states = "";
    TreeIterator<EObject> _allContents = resource.getAllContents();
    Iterable<EObject> _iterable = IteratorExtensions.<EObject>toIterable(_allContents);
    Iterable<State> _filter = Iterables.<State>filter(_iterable, State.class);
    for (final State e : _filter) {
      {
        CharSequence _compile = this.compile(e);
        String _plus = (states + _compile);
        states = _plus;
        states = (states + "\n");
      }
    }
    fsa.generateFile(("states/states" + ".xml"), states);
  }
  
  public CharSequence compile(final State state) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<state name=\"");
    String _name = state.getName();
    _builder.append(_name, "");
    _builder.append("\">\t\t\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t");
    _builder.append("<before methods=\"");
    String _xifexpression = null;
    boolean _and = false;
    ProcessBeforeState _before = state.getBefore();
    boolean _notEquals = (!Objects.equal(_before, null));
    if (!_notEquals) {
      _and = false;
    } else {
      ProcessBeforeState _before_1 = state.getBefore();
      EList<String> _methods = _before_1.getMethods();
      boolean _notEquals_1 = (!Objects.equal(_methods, null));
      _and = _notEquals_1;
    }
    if (_and) {
      ProcessBeforeState _before_2 = state.getBefore();
      EList<String> _methods_1 = _before_2.getMethods();
      _xifexpression = this.processMethodsList(_methods_1);
    } else {
      _xifexpression = "";
    }
    _builder.append(_xifexpression, "\t\t\t");
    _builder.append("\"/>");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t");
    _builder.append("<after methods=\"");
    ProcessAfterState _after = state.getAfter();
    EList<String> _methods_2 = _after.getMethods();
    String _processMethodsList = this.processMethodsList(_methods_2);
    _builder.append(_processMethodsList, "\t\t\t");
    _builder.append("\"/>\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t");
    _builder.append("<in_process methods=\"");
    ProcessInState _inProcess = state.getInProcess();
    EList<String> _methods_3 = _inProcess.getMethods();
    String _processMethodsList_1 = this.processMethodsList(_methods_3);
    _builder.append(_processMethodsList_1, "\t\t\t");
    _builder.append("\"/>");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t");
    _builder.append("<transitions>");
    CharSequence _xifexpression_1 = null;
    Transitions _transitions = state.getTransitions();
    boolean _notEquals_2 = (!Objects.equal(_transitions, null));
    if (_notEquals_2) {
      Transitions _transitions_1 = state.getTransitions();
      _xifexpression_1 = this.compile(_transitions_1);
    }
    _builder.append(_xifexpression_1, "\t\t\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t ");
    _builder.append("</transitions>");
    _builder.newLine();
    _builder.append("\t\t   ");
    _builder.append("</state>");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile(final Transitions transitions) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<transitions>");
    _builder.newLine();
    {
      EList<Transition> _transitions = transitions.getTransitions();
      for(final Transition transition : _transitions) {
        _builder.append("\t\t\t");
        CharSequence _compile = this.compile(transition);
        _builder.append(_compile, "\t\t\t");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t\t");
    _builder.append("</transitions>");
    return _builder;
  }
  
  public CharSequence compile(final Transition transition) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<transition name=\"");
    String _name = transition.getName();
    _builder.append(_name, "");
    _builder.append("\">");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t");
    Expression _condition = transition.getCondition();
    Object _complieExpr = this.complieExpr(_condition);
    _builder.append(_complieExpr, "\t\t\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("</transition>");
    return _builder;
  }
  
  public Object complieExpr(final Expression condition) {
    return null;
  }
  
  public String processMethodsList(final List<String> methods) {
    String _xblockexpression = null;
    {
      String methodsStr = "";
      for (int i = 0; (i < ((Object[])Conversions.unwrapArray(methods, Object.class)).length); i++) {
        {
          String _get = methods.get(i);
          String _plus = (methodsStr + _get);
          methodsStr = _plus;
          int _length = ((Object[])Conversions.unwrapArray(methods, Object.class)).length;
          int _minus = (_length - 1);
          boolean _lessThan = (i < _minus);
          if (_lessThan) {
            String _methodsStr = methodsStr;
            methodsStr = (_methodsStr + ",");
          }
        }
      }
      _xblockexpression = methodsStr;
    }
    return _xblockexpression;
  }
}
